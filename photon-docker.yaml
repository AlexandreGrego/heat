heat_template_version: 2013-05-23

description: |
  Sample heat template to deploy container into Photon instance.
parameters:

  external_network_id:
    type: string
    label: ext-net
    description: UUID of a Neutron external network
    default: 7092826e-d36b-46af-953b-fe587444a6c8

  photon_image:
    type: string
    description: Name of image to use for servers
    default: photonop

  mysql_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small

  key:
    type: string
    label: Key name
    description: Name of key-pair to be installed on the compute instance.
    default: test

  container_one:
    type: string
    description: Name of Docker Hub container to use
    default: socialwifi/gerrit


resources:
  # Create the container logical switch and configure DHCP.
  container_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: container-net
  container_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: container-subnet
      cidr: 192.168.42.0/24
      dns_nameservers: [192.168.110.10]
      enable_dhcp: true
      gateway_ip: 192.168.42.1
      network_id: { get_resource: container_net }
  # Create the database logical switch and configure DHCP
  database_net:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: database-net
  database_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: database-subnet
      cidr: 192.168.43.0/24
      dns_nameservers: [192.168.110.10]
      enable_dhcp: true
      gateway_ip: 192.168.43.1
      network_id: { get_resource: database_net }
  # Create router, add internal interfaces for 2 tiers, and also an uplink.
  app_router_01:
    type: OS::Neutron::Router
    properties:
      admin_state_up: true
      name: app-router-01
  app_router_01_gw:
    type: OS::Neutron::RouterGateway
    properties:
      network_id: {get_param: external_network_id}
      router_id: { get_resource: app_router_01 }
  app_router_int0:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: app_router_01 }
      subnet_id: { get_resource: container_subnet }
  app_router_int1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: app_router_01 }
      subnet_id: { get_resource: database_subnet }
  # Create Server ports
  etcd_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: database_net }
  # Provision etcd instance
  etcd-instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: photon_image }
      flavor: m1.small
      networks:
        - port: { get_resource: etcd_port0 }
  # Create Server ports
  mysql_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: database_net }
  mysql_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: mysql_image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: mysql_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __mysql_root_password__: { get_attr: [mysql_root_password, value] }
            #wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash
            # install MySQL
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y mysql-server
 
            # configure MySQL root password
            mysqladmin -u root password "__mysql_root_password__"
 
            # listen on all network interfaces
            sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf
 
            # restart service
            service mysql restart
 
            wc_notify --data-binary '{"status": "SUCCESS"}'
  # Create Container ports
  container0_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_resource: container_net }
  # Provision Container instance
  container0-instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: photon_image }
      flavor: m1.small
      networks:
        - port: { get_resource: container0_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __container1__: { get_param: container_one }
          template: |
            #!/bin/bash
            set -ux
            # Install Jenkins and Gerrit Containers
            docker pull __container1__
            docker run -d -p 9000:8080 -p 29418:29418 __container1__
            # Create the Jenkins plugins.txt
            cat > /tmp/plugins.txt <<EOF
            config-file-provider:2.7.5
            ssh-slaves:1.9
            openstack-cloud:1.8
            EOF
            #
            # # Create Dockerfile
            cat > /tmp/Dockerfile <<EOF
            FROM jenkins
            COPY plugins.txt /usr/share/jenkins/plugins.txt
            RUN /usr/local/bin/plugins.sh /usr/share/jenkins/plugins.txt
            EOF
            docker build -t jenkins/plugins -f /tmp/Dockerfile /tmp
            docker run -d -p 8080:8080 -p 50000:50000 jenkins/plugins
  # Attach floating IP
  floater:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: external_network_id }
      port_id: { get_resource: photon-svr_port0 }

outputs:
  photon_public_ip:
    description: Floating IP address of photon instance in public network
    value: { get_attr: [ floater, floating_ip_address ] }

