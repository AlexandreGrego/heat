heat_template_version: 2013-05-23

description: |
  Sample heat template to two tier application.
parameters:

  external_network_id:
    type: string
    label: ext-net
    description: UUID of a Neutron external network
    default: fdb92e61-75e4-47ef-9b74-557af5b6147d

  provider_network_id:
    type: string
    label: provider-net
    description: UUID of a Neutron external network
    default: e150193e-3948-4c8f-9aa9-b59ea60e7db2

  provider_subnet_id:
    type: string
    label: provider-subnet
    description: UUID of a Neutron external network
    default: dd1dd2ec-2ce7-421e-ac23-97475b16d65e

  db_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  web_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  key_pair:
    type: string
    description: SSH Key Pair
    default: nness

  mysql_root_password:
    type: string
    description: MySQL root password
    hidden: true

  database_password:
    type: string
    description: MySQL user password
    hidden: true

  database_name:
    type: string
    label: Database name
    description: Name of the application database.

  database_user:
    type: string
    label: Database username
    description: Name of the database user.

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used on the compute instance.
    default: m1.small

resources:

  # Create Security Groups
  db_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow sql traffic from web tier
      name: db-security-group
      rules:
        - remote_group_id: { get_resource: web_security_group }
          remote_mode: remote_group_id
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306

  web_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow web traffic from anywhere
      name: web-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22

  # Create port(s) on db logical network.
  db1_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: provider_network_id }
      security_groups:
        - { get_resource: db_security_group }

  # Create port(s) on the provider network.
  web1_port1:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: provider_network_id }
      security_groups:
        - { get_resource: web_security_group }

  web2_port2:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: provider_network_id }
      security_groups:
        - { get_resource: web_security_group }

  #Provision instances
  web1:
    type: OS::Nova::Server
    properties:
      name: web1
      image: { get_param: web_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: web1_port1 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __db_ipaddr__: { get_attr: [db1, first_address] }
            __database_user__: { get_param: database_user }
            __database_password__: { get_param: database_password }
            __database_password__: { get_param: database_password }
            __database_name__: { get_param: database_name }
            #wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash

            # Server prep
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql git
            service apache2 restart

            # clone git repository for 3 Tier App
            git clone https://github.com/nvpnathan/threetier.git
            cp threetier/web/index.php /var/www/html/index.php
            sed -i 's/##HOT_DB_SERVER##/__db_ipaddr__/' /var/www/html/index.php
            sed -i 's/##DATABASE_USER##/__database_user__/' /var/www/html/index.php
            sed -i 's/##DATABASE_PASSWORD##/__database_password__/' /var/www/html/index.php
            sed -i 's/##DATABASE_NAME##/__database_name__/' /var/www/html/index.php

  web2:
    type: OS::Nova::Server
    properties:
      name: web2
      image: { get_param: web_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: web2_port2 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __db_ipaddr__: { get_attr: [db1, first_address] }
            __database_user__: { get_param: database_user }
            __database_password__: { get_param: database_password }
            __database_name__: { get_param: database_name }
            #wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash

            # Server prep
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y apache2 php5 libapache2-mod-php5 php5-mcrypt php5-mysql git
            service apache2 restart

            # clone git repository for 3 Tier App
            git clone https://github.com/nvpnathan/threetier.git
            cp threetier/web/index.php /var/www/html/index.php
            sed -i 's/##HOT_DB_SERVER##/__db_ipaddr__/' /var/www/html/index.php
            sed -i 's/##DATABASE_USER##/__database_user__/' /var/www/html/index.php
            sed -i 's/##DATABASE_PASSWORD##/__database_password__/' /var/www/html/index.php
            sed -i 's/##DATABASE_NAME##/__database_name__/' /var/www/html/index.php
  db1:
    type: OS::Nova::Server
    properties:
      name: db1
      image: { get_param: db_image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: db1_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __mysql_root_password__: { get_param: mysql_root_password }
            __database_name__: { get_param: database_name }
            __database_user__: { get_param: database_user }
            __database_password__: { get_param: database_password }
            #wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash

            # install MySQL
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y mysql-server libapache2-mod-auth-mysql php5-mysql git
            # configure MySQL root password
            service mysql start
            mysqladmin -u root password "__mysql_root_password__"

            # listen on all network interfaces
            sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf

            # restart service
            service mysql restart

            # clone git repository for 3 Tier App
            git clone https://github.com/nvpnathan/threetier.git

            mysql -u root --password="__mysql_root_password__" <<EOF
            CREATE DATABASE __database_name__;
            CREATE USER '__database_user__'@'localhost';
            SET PASSWORD FOR '__database_user__'@'localhost'=PASSWORD("__database_password__");
            GRANT ALL PRIVILEGES ON __database_name__.* TO '__database_user__'@'*' IDENTIFIED BY '__database_password__';
            CREATE USER '__database_user__'@'%';
            SET PASSWORD FOR '__database_user__'@'%'=PASSWORD("__database_password__");
            GRANT ALL PRIVILEGES ON __database_name__.* TO '__database_user__'@'%' IDENTIFIED BY '__database_password__';
            FLUSH PRIVILEGES;
            EOF
            # copy vio database
            mysql -u root -p "__database_name__" < threetier/db/vio.sql --password="__database_password__"

  # Configure the LB'er
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 10
      max_retries: 5
      timeout: 10

  pool:
    type: OS::Neutron::Pool
    properties:
      name: mypool
      protocol: HTTP
      monitors: [{get_resource: monitor}]
      subnet_id: {get_param: provider_subnet_id}
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  lb:
    type: OS::Neutron::LoadBalancer
    properties:
      members: [ { get_resource: web1 }, { get_resource: web2 } ]
      protocol_port: 80
      pool_id: { get_resource: pool }

  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: external_network_id }
      port_id: { get_attr: [ pool, vip, port_id ] }

outputs:
  WebsiteURL:
    description: URL for the application
    value:
      str_replace:
        template: http://host/index.php
        params:
          host: { get_attr: [lb_floating, floating_ip_address] }
