heat_template_version: 2013-05-23

description: |
  A simple Heat template that spins up a 3 Tier App with 1 Web Server, 1 App Server,
  and 1 DB Server on private networks and attaches them to security groups (HOT template in YAML).

parameters:
  external_network_id:
    type: string
    label: ext-net
    description: UUID of the External network
    default: fdb92e61-75e4-47ef-9b74-557af5b6147d
  web_net:
    type: string
    label: web-net
    description: UUID of the Web network
    default: 743fb732-7ae8-42b9-99ec-0375b52dfa67

  app_net:
    type: string
    label: app-net
    description: UUID of the App network
    default: b2f1bda9-8e1f-4350-a8da-a49d806b2d8d

  db_net:
    type: string
    label: db-net
    description: UUID of the DB network
    default: ff35c71f-d71f-4792-bee6-bcb171921693

  web_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  app_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  db_image:
    type: string
    description: Name of image to use for servers
    default: ubuntu-14.04-server-amd64

  mysql_root_password:
    type: string
    description: MySQL root password
    hidden: true

  database_password:
    type: string
    description: MySQL user password
    hidden: true

  database_name:
    type: string
    label: Database name
    description: Name of the application database.

  database_user:
    type: string
    label: Database username
    description: Name of the database user

resources:
  # Create ports on web switch.
  web-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: web_net }
  web-svr-01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: external_network_id}
      port_id: { get_resource: web-svr-01_port0 }

  # Create port(s) on app switch.
  app-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: app_net }

  # Create port(s) on db switch.
  db-svr-01_port0:
    type: OS::Neutron::Port
    properties:
      admin_state_up: true
      network_id: { get_param: db_net }

  # Provision instances.
  db-svr-01:
    type: OS::Nova::Server
    properties:
      name: db-instance-01
      image: { get_param: db_image }
      flavor: m1.small
      networks:
        - port: { get_resource: db-svr-01_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __mysql_root_password__: { get_param: mysql_root_password }
            __database_name__: { get_param: database_name }
            __database_user__: { get_param: database_user }
            __database_password__: { get_param: database_password }
            #wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash
            # install MySQL
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y mysql-server

            # configure MySQL root password
            mysqladmin -u root password "__mysql_root_password__"

            # listen on all network interfaces
            sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf

            # restart service
            service mysql restart

            # create wordpress database
            mysql -u root --password="__mysql_root_password__" <<EOF
            CREATE DATABASE __database_name__;
            CREATE USER '__database_user__'@'localhost';
            SET PASSWORD FOR '__database_user__'@'localhost'=PASSWORD("__database_password__");
            GRANT ALL PRIVILEGES ON __database_name__.* TO '__database_user__'@'localhost' IDENTIFIED BY '__database_password__';
            CREATE USER '__database_user__'@'%';
            SET PASSWORD FOR '__database_user__'@'%'=PASSWORD("__database_password__");
            GRANT ALL PRIVILEGES ON __database_name__.* TO '__database_user__'@'%' IDENTIFIED BY '__database_password__';
            FLUSH PRIVILEGES;
            EOF

  app-svr-01:
    type: OS::Nova::Server
    depends_on: db-svr-01
    properties:
      name: app-instance-01
      image: { get_param: app_image }
      flavor: m1.small
      networks:
        - port: { get_resource: app-svr-01_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __mysql_ip__: { get_attr: [db-svr-01, first_address] }
            __database_name__: { get_resource: database_name }
            __database_user__: { get_param: database_user }
            __database_password__: { get_attr: [database_password, value] }
            #wc_notify: { get_attr: ['wh', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            # install dependencies
            apt-get update
            apt-get -y install apache2 php5 libapache2-mod-php5 php5-mysql php5-gd mysql-client
            # download wordpress
            wget http://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            # configure wordpress
            cp wordpress/wp-config-sample.php wordpress/wp-config.php
            sed -i 's/database_name_here/__database_name__/' wordpress/wp-config.php
            sed -i 's/username_here/__database_user__/' wordpress/wp-config.php
            sed -i 's/password_here/__database_password__/' wordpress/wp-config.php
            sed -i 's/localhost/__mysql_ip__/' wordpress/wp-config.php
            # install a copy of the configured wordpress into apache's www directory
            rm /var/www/html/index.html
            cp -R wordpress/* /var/www/html/
            # give apache ownership of the application files
            chown -R www-data:www-data /var/www/html/
            chmod -R g+w /var/www/html/
            # notify heat that we are done here
            #wc_notify --data-binary '{"status": "SUCCESS"}'

  web-svr-01:
    type: OS::Nova::Server
    depends_on: app-svr-01
    properties:
      name: web-instance-01
      image: { get_param: web_image }
      flavor: m1.small
      networks:
        - port: { get_resource: web-svr-01_port0 }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __app_ip__: { get_attr: [app-svr-01, first_address] }
          template: |
            #!/bin/bash
            # Install nginx
            rmp -UvH https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
            yum install -y nginx
            mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.disabled
            # Create the reverse proxy config
            cat > /etc/nginx/conf.d/wordpress-proxy.conf <<EOF
            server {
               listen 80;
               server_name wordpress.corp.local;
               access_log off;
               error_log off;
               location / {
                  proxy_pass http://##APP_IP_ADDR##/;
                  proxy_redirect off;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  client_max_body_size 100M;
                  client_body_buffer_size 1m;
                  proxy_intercept_errors on;
                  proxy_buffering on;
                  proxy_buffer_size 128k;
                  proxy_buffers 256 16k;
                  proxy_busy_buffers_size 256k;
                  proxy_temp_file_write_size 256k;
                  proxy_max_temp_file_size 0;
                  proxy_read_timeout 90;
                  proxy_send_timeout 90;
                }
            }
            EOF
            # Configure and start nginx
            sed -i 's/##APP_IP_ADDR##/__app_ip__/' /etc/nginx/conf.d/wordpress-proxy.conf
            service nginx start
            chkconfig nginx on

outputs:
  web-svr-01_private_ip:
    description: IP address of web-svr-01 in private network
    value: { get_attr: [ web-svr-01, first_address ] }
  web-svr-01_public_ip:
    description: Floating IP address of web-svr-01 in public network
    value: { get_attr: [ web-svr-01_floating_ip, floating_ip_address ] }

